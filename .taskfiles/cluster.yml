---
version: "3"

tasks:
  rook-ceph-toolbox:
    desc: Exec into the Rook Ceph toolbox
    cmds:
      - kubectl -n rook-ceph exec -it (kubectl -n rook-ceph get pod -l "app=rook-direct-mount" -o jsonpath='{.items[0].metadata.name}') bash
    silent: true
  rook-password:
    desc: Retrieve the rook-ceph password
    cmds:
      - kubectl -n rook-ceph get secret rook-ceph-dashboard-password -o jsonpath="{['data']['password']}" | base64 --decode && echo

  talos-apply:
    desc: Apply manifests to talos nodes
    cmds:
      - talosctl -n 10.8.20.31 apply-config -f k8s/talos/hegira/machineConfigs/durandal.yaml --insecure
      - talosctl -n 10.8.20.32 apply-config -f k8s/talos/hegira/machineConfigs/tycho.yaml --insecure
      - talosctl -n 10.8.20.33 apply-config -f k8s/talos/hegira/machineConfigs/leela.yaml --insecure
      - talosctl -n 10.8.20.40 apply-config -f k8s/talos/hegira/machineConfigs/xerxes.yaml --insecure
      - talosctl -n 10.8.20.42 apply-config -f k8s/talos/hegira/machineConfigs/shodan.yaml --insecure
      - talosctl -n 10.8.20.44 apply-config -f k8s/talos/hegira/machineConfigs/icarus.yaml --insecure
  # bootstrap-wipe-rook:
  #   desc: Wipe rook disks in talos
  #   cmds:
  #     - kubectl apply -f tools/wipe-rook.yaml

  git-check-yaml:
    desc: Check yaml for kustomize/kube errors
    cmds:
      - git diff --name-only origin/main.. | grep --color kustomization.yaml | sed 's/kustomization.yaml//' | xargs -I{} kustomize build {}
      - git diff --name-only origin/main.. | grep --color .yaml | xargs cat | kubectl apply -f - --dry-run=server

  bootstrap-sops:
    desc: Bootstrap cluster
    cmds:
      - kubectl create ns flux-system
      - cat ~/.config/sops/age/keys.txt | kubectl -n flux-system create secret generic sops-age --from-file=age.agekey=/dev/stdin

  bootstrap-flux:
    desc: Bootstrap flux (as per version in manifest)
    cmds:
      - yq '.spec.ref.tag' k8s/global/flux/repositories/git/flux.yaml | xargs -I{} flux install --version={} --export | kubectl apply -f -

  bootstrap-cluster:
    desc: Bootstrap Cluster
    cmds:
      - kubectl apply -k k8s/clusters/hegira/

  k10-password:
    desc: Retrieve the k10 passphrase
    cmds:
      - kubectl get secret $(kubectl get serviceaccount k10-k10 -o jsonpath="{.secrets[0].name}" --namespace kasten-io) --namespace kasten-io -ojsonpath="{.data.token}{'\n'}" | base64 --decode

  nfs-deps-pause:
    desc: Pause all Helm Releases that rely on NFS storage
    cmds:
      - flux suspend hr -n media plex
      - kubectl scale -n media deploy/plex --replicas 0
      - flux suspend hr -n downloads qbittorrent
      - kubectl scale -n downloads deploy/qbittorrent --replicas 0
      - flux suspend hr -n downloads sabnzbd
      - kubectl scale -n downloads deploy/sabnzbd --replicas 0
      - flux suspend hr -n downloads nzbget
      - kubectl scale -n downloads deploy/nzbget --replicas 0
      - flux suspend hr -n organizarrs radarr
      - kubectl scale -n organizarrs deploy/radarr --replicas 0
      - flux suspend hr -n organizarrs readarr
      - kubectl scale -n organizarrs deploy/readarr --replicas 0
      - flux suspend hr -n organizarrs sonarr
      - kubectl scale -n organizarrs deploy/sonarr --replicas 0
      - flux suspend hr -n organizarrs lidarr
      - kubectl scale -n organizarrs deploy/lidarr --replicas 0
      - flux suspend hr -n organizarrs calibre
      - kubectl scale -n organizarrs deploy/calibre --replicas 0
      - flux suspend hr -n organizarrs calibre-web
      - kubectl scale -n organizarrs deploy/calibre-web --replicas 0
      - flux suspend hr -n organizarrs calibre-web
      - kubectl scale -n organizarrs deploy/calibre-web --replicas 0
      - flux suspend hr -n system-monitoring thanos-compactor
      - kubectl scale -n system-monitoring deploy/thanos-compactor --replicas 0
      - flux suspend hr -n system-monitoring loki
      - kubectl scale -n system-monitoring deploy/loki --replicas 0

  nfs-deps-resume:
    desc: Resume all Helm Releases that rely on NFS storage
    cmds:
      - flux resume hr -n media plex
      - kubectl scale -n media deploy/plex --replicas 1
      - flux resume hr -n downloads qbittorrent
      - kubectl scale -n downloads deploy/qbittorrent --replicas 1
      - flux resume hr -n downloads sabnzbd
      - kubectl scale -n downloads deploy/sabnzbd --replicas 1
      - flux resume hr -n downloads nzbget
      - kubectl scale -n downloads deploy/nzbget --replicas 1
      - flux resume hr -n organizarrs radarr
      - kubectl scale -n organizarrs deploy/radarr --replicas 1
      - flux resume hr -n organizarrs readarr
      - kubectl scale -n organizarrs deploy/readarr --replicas 1
      - flux resume hr -n organizarrs sonarr
      - kubectl scale -n organizarrs deploy/sonarr --replicas 1
      - flux resume hr -n organizarrs lidarr
      - kubectl scale -n organizarrs deploy/lidarr --replicas 1
      - flux resume hr -n organizarrs calibre
      - kubectl scale -n organizarrs deploy/calibre --replicas 1
      - flux resume hr -n organizarrs calibre-web
      - kubectl scale -n organizarrs deploy/calibre-web --replicas 1
      - flux resume hr -n system-monitoring thanos-compactor
      - kubectl scale -n system-monitoring deploy/thanos-compactor --replicas 1
      - flux resume hr -n system-monitoring loki
      - kubectl scale -n system-monitoring deploy/loki --replicas 1

  build-talos-config:
    desc: Build talos configs
    cmds:
      - git stash && git pull && git stash pop
      - python k8s/talos/buildClusterConfig.py  --variables-file k8s/talos/hegira/variables.sops.yaml k8s/talos/hegira/config.yaml
      - find k8s/talos/hegira/machineConfigs/ -maxdepth 1 -type f -exec talosctl validate -m metal -c {} \;

  delete-failed-pods:
    desc: Deletes failed pods
    cmds:
      - kubectl delete pods --field-selector status.phase=Failed -A --ignore-not-found=true

  debug-volume:
    desc: Attach a volume to a container for debugging, ex. VOLUME=zigbee2mqtt-config-v1 NAMESPACE=home task debug-volume
    interactive: true
    silent: true
    cmds:
      - |
        kubectl run debug-{{.VOLUME}} -n {{.NAMESPACE}} -i --tty --rm --image=null --overrides='
          {
            "spec": {
              "containers": [
                {
                  "name": "debug",
                  "image": "docker.io/library/alpine:3.15",
                  "command": [
                    "/bin/sh"
                  ],
                  "stdin": true,
                  "stdinOnce": true,
                  "tty": true,
                  "lifecycle": {
                    "postStart": {
                      "exec": {
                        "command": [
                          "/bin/sh",
                          "-c",
                          "apk add --no-cache curl vim"
                        ]
                      }
                    }
                  },
                  "volumeMounts": [
                    {
                      "name": "backups",
                      "mountPath": "/mnt/backups/"
                    },
                    {
                      "name": "debug-volume",
                      "mountPath": "/mnt/volume/"
                    }
                  ]
                }
              ],
              "volumes": [
                {
                  "name": "backups",
                  "nfs": {
                    "server": '{{.NAS_ADDRESS | default "hyperion"}}',
                    "path": '{{.NAS_PATH | default "/tank/backups/"}}'
                  }
                },
                {
                  "name": "debug-volume",
                  "persistentVolumeClaim": {
                    "claimName": "{{.VOLUME}}"
                  }
                }
              ],
              "restartPolicy": "Never"
            }
          }'

  debug-node:
    desc: Create a privileged container on a node for debugging, ex. NODE=anvil task debug-node
    interactive: true
    cmds:
      - |
        kubectl run debug-{{.NODE}} -i --tty --rm --image="docker.io/library/alpine:3.15" --privileged --overrides='
          {
            "spec": {
              "nodeSelector": {
                "kubernetes.io/hostname": "{{.NODE}}"
              },
              "restartPolicy": "Never"
            }
          }'

  list-dockerhub:
    desc: What dockerhub images are running in my cluster
    cmds:
      - kubectl get pods --all-namespaces -o=jsonpath="{range .items[*]}{'\n'}{range .spec.containers[*]}{.image}{'\n'}{end}{end}" | sort | uniq | grep -Ev 'quay|gcr|ghcr|ecr|us-docker' | grep -Ev 'bitnami|rook|intel|grafana' |  sed -e 's/docker\.io\///g' | sort | uniq

  netshoot:
    desc: Create a netshoot container for debugging
    cmds:
      - kubectl run tmp-shell --rm -i --tty --image ghcr.io/nicolaka/netshoot:latest {{.CLI_ARGS}}

---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: sonarr
  namespace: organizarrs
spec:
  interval: 5m
  chart:
    spec:
      # renovate: registryUrl=https://k8s-at-home.com/charts/
      chart: sonarr
      version: 15.3.0
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 5m
  values:
    controllerType: deployment
    image:
      repository: ghcr.io/k8s-at-home/sonarr
      tag: v3.0.6.1342

    env:
      TZ: "${TZ}"

    ingress:
      main:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: traefik
          cert-manager.io/cluster-issuer: ${CLUSTER_CERT}
          external-dns/is-public: "false"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-system-rfc1918-ips@kubernetescrd
          hajimari.io/enable: "true"
          hajimari.io/icon: "television-box"
          hajimari.io/appName: sonarr
        hosts:
          - host: &host "sonarr.${CLUSTER_DOMAIN}"
            paths:
              - path: /
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: &tls prowlarr-${CLUSTER_NAME}-tlssonarr

      api:
        enabled: true
        annotations:
          kubernetes.io/ingress.class: traefik
          external-dns/is-public: "true"
          traefik.ingress.kubernetes.io/router.entrypoints: websecure
          traefik.ingress.kubernetes.io/router.middlewares: network-system-rfc1918-ips@kubernetescrd
        hosts:
          - host: *host
            paths:
              - path: /api
                pathType: Prefix
        tls:
          - hosts:
              - *host
            secretName: *tls

    persistence:
      config:
        enabled: true
        existingClaim: sonarr-config-v1
      nfs-nas-media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: ${NAS_ADDRESS}
            path: /volume1/
        mountPath: /media
        readOnly: false
      nfs-nas-backup:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: ${NAS_ADDRESS}
            path: /volume1/backup/kubernetes/apps/sonarr
        mountPath: /config/Backups
        readOnly: false

    podSecurityContext:
      runAsUser: 1000
      runAsGroup: 1000
      fsGroup: 1000
      fsGroupChangePolicy: OnRootMismatch
    resources:
      requests:
        memory: 350Mi
        cpu: 25m
      limits:
        memory: 5000Mi
    prometheus:
      podMonitor:
        enabled: true
        interval: 10m
        scrapeTimeout: 2m
    additionalContainers:
      - name: exportarr
        image: ghcr.io/onedr0p/exportarr:v0.6.2
        imagePullPolicy: IfNotPresent
        args: ["exportarr", "sonarr"]
        env:
          - name: PORT
            value: "32123"
          - name: URL
            value: "http://localhost"
          - name: CONFIG
            value: "/config/config.xml"
          - name: ENABLE_UNKNOWN_QUEUE_ITEMS
            value: "true"
          - name: ENABLE_ADDITIONAL_METRICS
            value: "true"
        ports:
          - name: exportarr
            containerPort: 32123
        volumeMounts:
          - name: config
            mountPath: /config
            readOnly: true

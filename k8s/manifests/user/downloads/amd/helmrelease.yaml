---
apiVersion: helm.toolkit.fluxcd.io/v2beta1
kind: HelmRelease
metadata:
  name: &app amd
  namespace: downloads
spec:
  interval: 5m
  chart:
    spec:
      chart: kah-common-chart
      version: 1.1.2
      sourceRef:
        kind: HelmRepository
        name: k8s-at-home-charts
        namespace: flux-system
      interval: 15m
  install:
    createNamespace: true
    remediation: # perform remediation when helm install fails
      retries: 3
  upgrade:
    remediation: # perform remediation when helm upgrade fails
      retries: 3
      remediateLastFailure: true # remediate the last failure, when no retries remain
    cleanupOnFail: true
  dependsOn:
    - name: lidarr
      namespace: organizarrs
  values:
    global:
      nameOverride: *app
    image:
      repository: randomninjaatk/amd
      tag: latest@sha256:3ad88a180cd45d98a6a0d6da6239cb1d62a0c8ef5a17da264b5cfcb96ba05c7b
      pullPolicy: IfNotPresent

    initContainers:
      wait-for-lidarr:
        image: busybox:latest
        imagePullPolicy: IfNotPresent
        command:
          [
            "sh",
            "-c",
            'until nc -vz lidarr.organizarrs 5432; do echo "Waiting for lidarr..."; sleep 3; done;',
          ]

    env:
      TZ: ${TZ}
      PUID: "568"
      GUID: "568"
      AUTOSTART: true
      SCRIPTINTERVAL: 1h
      DOWNLOADMODE: wanted
      FALLBACKSEARCH: True
      LIST: both
      SearchType: both
      Concurrency: 1
      EMBEDDED_COVER_QUALITY: 80
      FORMAT: MP3
      BITRATE: 320
      ENABLEPOSTPROCESSING: true
      FORCECONVERT: false
      requirequality: false
      MatchDistance: 10
      replaygain: true
      FolderPermissions: 766
      FilePermissions: 666
      MBRAINZMIRROR: https://musicbrainz.org
      MBRATELIMIT: 1
      LidarrUrl: http://lidarr.organizarrs:8686
      LidarrAPIkey: ${SECRET_LIDARR_API_KEY}
      ARL_TOKEN: ${SECRET_ARL_TOKEN}
      NOTIFYPLEX: false
      PLEXLIBRARYNAME: Music
      PLEXURL: http://x.x.x.x:8686
      PLEXTOKEN: plextoken
      ALBUM_TYPE_FILTER: COMPILE
      POSTPROCESSTHREADS: 1

    service:
      main:
        ports:
          http:
            port: 80

    persistence:
      config:
        enabled: true
        existingClaim: amd-config
      nfs-nas-media:
        enabled: true
        type: custom
        volumeSpec:
          nfs:
            server: ${NAS_ADDRESS}
            path: /volume1/downloads/
        mountPath: /downloads-amd/
        readOnly: false

    # Nothing to probe, so...
    probes:
      liveness:
        enabled: false
      readiness:
        enabled: false
      startup:
        enabled: false

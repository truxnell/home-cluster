---
prometheus:
  ingress:
    enabled: true
    pathType: Prefix
    ingressClassName: "nginx"
    annotations:
      hajimari.io/enable: "true"
      hajimari.io/icon: database-clock
      hajimari.io/appName: Prometheus

    hosts:
      - &host prometheus.${EXTERNAL_DOMAIN}
    tls:
      - hosts:
          - *host

  thanosService:
    enabled: true
  thanosServiceMonitor:
    enabled: true

  prometheusSpec:
    replicas: 3
    replicaExternalLabelName: __replica__
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    retentionSize: "8GB"
    retention: 14d
    enableAdminAPI: true
    walCompression: true
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: ceph-block
          resources:
            requests:
              storage: 10Gi
    resources:
      requests:
        cpu: 350m
        memory: 4744M
        # limits:
        # memory: 4744M
    thanos:
      image: quay.io/thanos/thanos:v0.28.0
      # renovate: datasource=docker depName=quay.io/thanos/thanos
      version: v0.28.0
      objectStorageConfig:
        name: &secret thanos-objstore-secret
        key: objstore.yml

    podAnnotations:
      secret.reloader.stakater.com/reload: *secret

    additionalScrapeConfigs:
      - job_name: node-exporter
        scrape_interval: 1m
        scrape_timeout: 10s
        honor_timestamps: true
        static_configs:
          - targets:
              - "technocore.${INTERNAL_DOMAIN}:9100"
              - "prusa.${INTERNAL_DOMAIN}:9100"

      - job_name: windows-exporter
        scrape_interval: 1m
        scrape_timeout: 10s
        honor_timestamps: true
        static_configs:
          - targets:
              - "10.8.20.222:9182"

      - job_name: ts110
        scrape_interval: 1m
        scrape_timeout: 10s
        honor_timestamps: true
        static_configs:
          - targets:
              - "hs110-exporter-prusa.system-monitoring:8110"
              - "hs110-exporter-rack.system-monitoring:8110"

      - job_name: pikvm
        metrics_path: /api/export/prometheus/metrics
        basic_auth:
          username: "${SECRET_PIKVM_USERNAME}"
          password: "${SECRET_PIKVM_PASSWORD}"
        static_configs:
          - targets:
              - "technocore.${INTERNAL_DOMAIN}"

      - job_name: "octoprint"
        scrape_interval: 1m
        scrape_timeout: 10s
        metrics_path: "/plugin/prometheus_exporter/metrics"
        params:
          apikey: ["${SECRET_OCTOPRINT_APIKEY}"]
        tls_config:
          insecure_skip_verify: true
        static_configs:
          - targets:
              - "prusa.${INTERNAL_DOMAIN}:5000"

      - job_name: coredns
        scrape_interval: 1m
        scrape_timeout: 10s
        honor_timestamps: true
        static_configs:
          - targets:
              - "10.8.5.2:9153"

      - job_name: "kubernetes-ingresses"
        metrics_path: /probe
        scrape_interval: 60s
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: ingress
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_ingress_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [
                __meta_kubernetes_ingress_scheme,
                __address__,
                __meta_kubernetes_ingress_path,
              ]
            regex: (.+);(.+);(.+)
            replacement: $${1}://$${2}$${3}
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_ingress_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_ingress_name]
            target_label: kubernetes_name

      - job_name: "kubernetes-services-http"
        metrics_path: /probe
        scrape_interval: 60s
        params:
          module: [http_2xx]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_protocol]
            action: keep
            regex: http
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name

      - job_name: "kubernetes-services-tcp"
        metrics_path: /probe
        scrape_interval: 60s
        params:
          module: [tcp_connect]
        kubernetes_sd_configs:
          - role: service
        relabel_configs:
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_probe]
            action: keep
            regex: true
          - source_labels:
              [__meta_kubernetes_service_annotation_prometheus_io_protocol]
            action: keep
            regex: tcp
          - source_labels: [__address__]
            target_label: __param_target
          - target_label: __address__
            replacement: blackbox-exporter:9115
          - source_labels: [__param_target]
            target_label: instance
          - action: labelmap
            regex: __meta_kubernetes_service_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            target_label: kubernetes_namespace
          - source_labels: [__meta_kubernetes_service_name]
            target_label: kubernetes_name
